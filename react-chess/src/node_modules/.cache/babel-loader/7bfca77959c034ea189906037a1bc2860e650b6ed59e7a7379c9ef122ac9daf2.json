{"ast":null,"code":"import { areSameColorTiles, findPieceCoords } from '../helper';\nimport { getKnightMoves, getRookMoves, getBishopMoves, getQueenMoves, getKingMoves, getPawnMoves, getPawnCaptures, getCastlingMoves, getPieces, getKingPosition } from './getMoves';\nimport { movePiece, movePawn } from './move';\nconst arbiter = {\n  getRegularMoves: function ({\n    position,\n    piece,\n    rank,\n    file\n  }) {\n    if (piece.endsWith('n')) return getKnightMoves({\n      position,\n      rank,\n      file\n    });\n    if (piece.endsWith('b')) return getBishopMoves({\n      position,\n      piece,\n      rank,\n      file\n    });\n    if (piece.endsWith('r')) return getRookMoves({\n      position,\n      piece,\n      rank,\n      file\n    });\n    if (piece.endsWith('q')) return getQueenMoves({\n      position,\n      piece,\n      rank,\n      file\n    });\n    if (piece.endsWith('k')) return getKingMoves({\n      position,\n      piece,\n      rank,\n      file\n    });\n    if (piece.endsWith('p')) return getPawnMoves({\n      position,\n      piece,\n      rank,\n      file\n    });\n  },\n  getValidMoves: function ({\n    position,\n    castleDirection,\n    prevPosition,\n    piece,\n    rank,\n    file\n  }) {\n    let moves = this.getRegularMoves({\n      position,\n      piece,\n      rank,\n      file\n    });\n    const notInCheckMoves = [];\n    if (piece.endsWith('p')) {\n      moves = [...moves, ...getPawnCaptures({\n        position,\n        prevPosition,\n        piece,\n        rank,\n        file\n      })];\n    }\n    if (piece.endsWith('k')) moves = [...moves, ...getCastlingMoves({\n      position,\n      castleDirection,\n      piece,\n      rank,\n      file\n    })];\n    moves.forEach(([x, y]) => {\n      const positionAfterMove = this.performMove({\n        position,\n        piece,\n        rank,\n        file,\n        x,\n        y\n      });\n      if (!this.isPlayerInCheck({\n        positionAfterMove,\n        position,\n        player: piece[0]\n      })) {\n        notInCheckMoves.push([x, y]);\n      }\n    });\n    return notInCheckMoves;\n  },\n  isPlayerInCheck: function ({\n    positionAfterMove,\n    position,\n    player\n  }) {\n    const enemy = player.startsWith('w') ? 'b' : 'w';\n    let kingPos = getKingPosition(positionAfterMove, player);\n    const enemyPieces = getPieces(positionAfterMove, enemy);\n    const enemyMoves = enemyPieces.reduce((acc, p) => acc = [...acc, ...(p.piece.endsWith('p') ? getPawnCaptures({\n      position: positionAfterMove,\n      prevPosition: position,\n      ...p\n    }) : this.getRegularMoves({\n      position: positionAfterMove,\n      ...p\n    }))], []);\n    if (enemyMoves.some(([x, y]) => kingPos[0] === x && kingPos[1] === y)) return true;else return false;\n  },\n  performMove: function ({\n    position,\n    piece,\n    rank,\n    file,\n    x,\n    y\n  }) {\n    if (piece.endsWith('p')) return movePawn({\n      position,\n      piece,\n      rank,\n      file,\n      x,\n      y\n    });else return movePiece({\n      position,\n      piece,\n      rank,\n      file,\n      x,\n      y\n    });\n  },\n  isStalemate: function (position, player, castleDirection) {\n    const isInCheck = this.isPlayerInCheck({\n      positionAfterMove: position,\n      player\n    });\n    if (isInCheck) return false;\n    const pieces = getPieces(position, player);\n    const moves = pieces.reduce((acc, p) => acc = [...acc, ...this.getValidMoves({\n      position,\n      castleDirection,\n      ...p\n    })], []);\n    return !isInCheck && moves.length === 0;\n  },\n  insufficientMaterial: function (position) {\n    const pieces = position.reduce((acc, rank) => acc = [...acc, ...rank.filter(spot => spot)], []);\n\n    // King vs. king\n    if (pieces.length === 2) return true;\n\n    // King and bishop vs. king\n    // King and knight vs. king\n    if (pieces.length === 3 && pieces.some(p => p.endsWith('b') || p.endsWith('n'))) return true;\n\n    // King and bishop vs. king and bishop of the same color as the opponent's bishop\n    if (pieces.length === 4 && pieces.every(p => p.endsWith('b') || p.endsWith('k')) && new Set(pieces).size === 4 && areSameColorTiles(findPieceCoords(position, 'wb')[0], findPieceCoords(position, 'bb')[0])) return true;\n    return false;\n  },\n  isCheckMate: function (position, player, castleDirection) {\n    const isInCheck = this.isPlayerInCheck({\n      positionAfterMove: position,\n      player\n    });\n    if (!isInCheck) return false;\n    const pieces = getPieces(position, player);\n    const moves = pieces.reduce((acc, p) => acc = [...acc, ...this.getValidMoves({\n      position,\n      castleDirection,\n      ...p\n    })], []);\n    return isInCheck && moves.length === 0;\n  }\n};\nexport default arbiter;","map":{"version":3,"names":["areSameColorTiles","findPieceCoords","getKnightMoves","getRookMoves","getBishopMoves","getQueenMoves","getKingMoves","getPawnMoves","getPawnCaptures","getCastlingMoves","getPieces","getKingPosition","movePiece","movePawn","arbiter","getRegularMoves","position","piece","rank","file","endsWith","getValidMoves","castleDirection","prevPosition","moves","notInCheckMoves","forEach","x","y","positionAfterMove","performMove","isPlayerInCheck","player","push","enemy","startsWith","kingPos","enemyPieces","enemyMoves","reduce","acc","p","some","isStalemate","isInCheck","pieces","length","insufficientMaterial","filter","spot","every","Set","size","isCheckMate"],"sources":["C:/Users/Dr. Diabootical/OneDrive/Gaming/ReactChess-master/src/arbiter/arbiter.js"],"sourcesContent":["import { areSameColorTiles, findPieceCoords } from '../helper';\nimport { getKnightMoves, getRookMoves, getBishopMoves, getQueenMoves, getKingMoves, getPawnMoves, getPawnCaptures, getCastlingMoves, getPieces, getKingPosition } from './getMoves'\nimport { movePiece,movePawn } from './move';\n\nconst arbiter = {\n\n    getRegularMoves : function ({position,piece,rank,file}) {\n        if (piece.endsWith('n'))\n            return getKnightMoves({position,rank,file});\n        if (piece.endsWith('b'))\n            return getBishopMoves({position,piece,rank,file});\n        if (piece.endsWith('r'))\n            return getRookMoves({position,piece,rank,file});\n        if (piece.endsWith('q'))\n            return getQueenMoves({position,piece,rank,file});\n        if (piece.endsWith('k'))\n            return getKingMoves({position,piece,rank,file});\n        if (piece.endsWith('p'))\n            return getPawnMoves({position,piece,rank,file})\n    },\n   \n    getValidMoves : function ({position,castleDirection,prevPosition,piece,rank,file}) {\n        let moves = this.getRegularMoves({position,piece,rank,file})\n        const notInCheckMoves = []\n\n        if (piece.endsWith('p')){\n            moves = [\n                ...moves,\n                ...getPawnCaptures({position,prevPosition,piece,rank,file})\n            ]\n        }\n        if (piece.endsWith('k'))\n            moves = [\n                ...moves , \n                ...getCastlingMoves({position,castleDirection,piece,rank,file})\n            ]\n\n        moves.forEach(([x,y]) => {\n            const positionAfterMove = \n                this.performMove({position,piece,rank,file,x,y})\n\n            if (!this.isPlayerInCheck({positionAfterMove, position, player : piece[0]})){\n                notInCheckMoves.push([x,y])\n            }\n        })\n        return notInCheckMoves\n    },\n\n    isPlayerInCheck : function ({positionAfterMove, position, player}) {\n        const enemy = player.startsWith('w') ? 'b' : 'w'\n        let kingPos = getKingPosition(positionAfterMove,player)\n        const enemyPieces = getPieces(positionAfterMove,enemy)\n\n        const enemyMoves = enemyPieces.reduce((acc,p) => acc = [\n            ...acc,\n            ...(p.piece.endsWith('p')\n            ?   getPawnCaptures({\n                    position: positionAfterMove, \n                    prevPosition:  position,\n                    ...p\n                })\n            :   this.getRegularMoves({\n                    position: positionAfterMove, \n                    ...p\n                })\n            )\n        ], [])\n    \n        if (enemyMoves.some (([x,y]) => kingPos[0] === x && kingPos[1] === y))\n        return true\n\n        else\n        return false\n    },\n\n    performMove : function ({position,piece,rank,file,x,y}) {\n        if (piece.endsWith('p'))\n            return movePawn({position,piece,rank,file,x,y})\n        else \n            return movePiece({position,piece,rank,file,x,y})\n    },\n\n    isStalemate : function(position,player,castleDirection) {\n        const isInCheck = this.isPlayerInCheck({positionAfterMove: position, player})\n\n        if (isInCheck)\n            return false\n            \n        const pieces = getPieces(position,player)\n        const moves = pieces.reduce((acc,p) => acc = [\n            ...acc,\n            ...(this.getValidMoves({\n                    position, \n                    castleDirection, \n                    ...p\n                })\n            )\n        ], [])\n\n        return (!isInCheck && moves.length === 0)\n    },\n\n    insufficientMaterial : function(position) {\n\n        const pieces = \n            position.reduce((acc,rank) => \n                acc = [\n                    ...acc,\n                    ...rank.filter(spot => spot)\n                ],[])\n\n        // King vs. king\n        if (pieces.length === 2)\n            return true\n\n        // King and bishop vs. king\n        // King and knight vs. king\n        if (pieces.length === 3 && pieces.some(p => p.endsWith('b') || p.endsWith('n')))\n            return true\n\n        // King and bishop vs. king and bishop of the same color as the opponent's bishop\n        if (pieces.length === 4 && \n            pieces.every(p => p.endsWith('b') || p.endsWith('k')) &&\n            new Set(pieces).size === 4 &&\n            areSameColorTiles(\n                findPieceCoords(position,'wb')[0],\n                findPieceCoords(position,'bb')[0]\n            )\n        )\n            return true\n\n        return false\n    },\n\n    isCheckMate : function(position,player,castleDirection) {\n        const isInCheck = this.isPlayerInCheck({positionAfterMove: position, player})\n\n        if (!isInCheck)\n            return false\n            \n        const pieces = getPieces(position,player)\n        const moves = pieces.reduce((acc,p) => acc = [\n            ...acc,\n            ...(this.getValidMoves({\n                    position, \n                    castleDirection, \n                    ...p\n                })\n            )\n        ], [])\n\n        return (isInCheck && moves.length === 0)\n    },\n\n   \n\n}\n\n\nexport default arbiter"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}