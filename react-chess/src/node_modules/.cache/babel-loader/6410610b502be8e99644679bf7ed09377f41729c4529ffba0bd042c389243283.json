{"ast":null,"code":"import arbiter from \"./arbiter\";\nexport const getRookMoves = ({\n  position,\n  piece,\n  rank,\n  file\n}) => {\n  const moves = [];\n  const us = piece[0];\n  const enemy = us === 'w' ? 'b' : 'w';\n  const direction = [[-1, 0], [1, 0], [0, -1], [0, 1]];\n  direction.forEach(dir => {\n    for (let i = 1; i <= 8; i++) {\n      var _position$x;\n      const x = rank + i * dir[0];\n      const y = file + i * dir[1];\n      if ((position === null || position === void 0 ? void 0 : (_position$x = position[x]) === null || _position$x === void 0 ? void 0 : _position$x[y]) === undefined) break;\n      if (position[x][y].startsWith(enemy)) {\n        moves.push([x, y]);\n        break;\n      }\n      if (position[x][y].startsWith(us)) {\n        break;\n      }\n      moves.push([x, y]);\n    }\n  });\n  return moves;\n};\nexport const getKnightMoves = ({\n  position,\n  rank,\n  file\n}) => {\n  const moves = [];\n  const enemy = position[rank][file].startsWith('w') ? 'b' : 'w';\n  const candidates = [[-2, -1], [-2, 1], [-1, -2], [-1, 2], [1, -2], [1, 2], [2, -1], [2, 1]];\n  candidates.forEach(c => {\n    var _position;\n    const cell = position === null || position === void 0 ? void 0 : (_position = position[rank + c[0]]) === null || _position === void 0 ? void 0 : _position[file + c[1]];\n    if (cell !== undefined && (cell.startsWith(enemy) || cell === '')) {\n      moves.push([rank + c[0], file + c[1]]);\n    }\n  });\n  return moves;\n};\nexport const getBishopMoves = ({\n  position,\n  piece,\n  rank,\n  file\n}) => {\n  const moves = [];\n  const us = piece[0];\n  const enemy = us === 'w' ? 'b' : 'w';\n  const direction = [[-1, -1], [-1, 1], [1, -1], [1, 1]];\n  direction.forEach(dir => {\n    for (let i = 1; i <= 8; i++) {\n      var _position$x2;\n      const x = rank + i * dir[0];\n      const y = file + i * dir[1];\n      if ((position === null || position === void 0 ? void 0 : (_position$x2 = position[x]) === null || _position$x2 === void 0 ? void 0 : _position$x2[y]) === undefined) break;\n      if (position[x][y].startsWith(enemy)) {\n        moves.push([x, y]);\n        break;\n      }\n      if (position[x][y].startsWith(us)) {\n        break;\n      }\n      moves.push([x, y]);\n    }\n  });\n  return moves;\n};\nexport const getQueenMoves = ({\n  position,\n  piece,\n  rank,\n  file\n}) => {\n  const moves = [...getBishopMoves({\n    position,\n    piece,\n    rank,\n    file\n  }), ...getRookMoves({\n    position,\n    piece,\n    rank,\n    file\n  })];\n  return moves;\n};\nexport const getKingMoves = ({\n  position,\n  piece,\n  rank,\n  file\n}) => {\n  let moves = [];\n  const us = piece[0];\n  const direction = [[1, -1], [1, 0], [1, 1], [0, -1], [0, 1], [-1, -1], [-1, 0], [-1, 1]];\n  direction.forEach(dir => {\n    var _position$x3;\n    const x = rank + dir[0];\n    const y = file + dir[1];\n    if ((position === null || position === void 0 ? void 0 : (_position$x3 = position[x]) === null || _position$x3 === void 0 ? void 0 : _position$x3[y]) !== undefined && !position[x][y].startsWith(us)) moves.push([x, y]);\n  });\n  return moves;\n};\nexport const getPawnMoves = ({\n  position,\n  piece,\n  rank,\n  file\n}) => {\n  var _position4;\n  const moves = [];\n  const dir = piece === 'wp' ? 1 : -1;\n\n  // Move two tiles on first move\n  if (rank % 5 === 1) {\n    var _position2, _position3;\n    if ((position === null || position === void 0 ? void 0 : (_position2 = position[rank + dir]) === null || _position2 === void 0 ? void 0 : _position2[file]) === '' && (position === null || position === void 0 ? void 0 : (_position3 = position[rank + dir + dir]) === null || _position3 === void 0 ? void 0 : _position3[file]) === '') {\n      moves.push([rank + dir + dir, file]);\n    }\n  }\n\n  // Move one tile\n  if (!(position !== null && position !== void 0 && (_position4 = position[rank + dir]) !== null && _position4 !== void 0 && _position4[file])) {\n    moves.push([rank + dir, file]);\n  }\n  return moves;\n};\nexport const getPawnCaptures = ({\n  position,\n  prevPosition,\n  piece,\n  rank,\n  file\n}) => {\n  var _position5, _position6;\n  const moves = [];\n  const dir = piece === 'wp' ? 1 : -1;\n  const enemy = piece[0] === 'w' ? 'b' : 'w';\n\n  // Capture enemy to left\n  if (position !== null && position !== void 0 && (_position5 = position[rank + dir]) !== null && _position5 !== void 0 && _position5[file - 1] && position[rank + dir][file - 1].startsWith(enemy)) {\n    moves.push([rank + dir, file - 1]);\n  }\n\n  // Capture enemy to right\n  if (position !== null && position !== void 0 && (_position6 = position[rank + dir]) !== null && _position6 !== void 0 && _position6[file + 1] && position[rank + dir][file + 1].startsWith(enemy)) {\n    moves.push([rank + dir, file + 1]);\n  }\n\n  // EnPassant\n  // Check if enemy moved twice in last round\n  const enemyPawn = dir === 1 ? 'bp' : 'wp';\n  const adjacentFiles = [file - 1, file + 1];\n  if (prevPosition) {\n    if (dir === 1 && rank === 4 || dir === -1 && rank === 3) {\n      adjacentFiles.forEach(f => {\n        var _position$rank, _position7, _prevPosition$rank, _prevPosition;\n        if ((position === null || position === void 0 ? void 0 : (_position$rank = position[rank]) === null || _position$rank === void 0 ? void 0 : _position$rank[f]) === enemyPawn && (position === null || position === void 0 ? void 0 : (_position7 = position[rank + dir + dir]) === null || _position7 === void 0 ? void 0 : _position7[f]) === '' && (prevPosition === null || prevPosition === void 0 ? void 0 : (_prevPosition$rank = prevPosition[rank]) === null || _prevPosition$rank === void 0 ? void 0 : _prevPosition$rank[f]) === '' && (prevPosition === null || prevPosition === void 0 ? void 0 : (_prevPosition = prevPosition[rank + dir + dir]) === null || _prevPosition === void 0 ? void 0 : _prevPosition[f]) === enemyPawn) {\n          moves.push([rank + dir, f]);\n        }\n      });\n    }\n  }\n  return moves;\n};\nexport const getCastlingMoves = ({\n  position,\n  castleDirection,\n  piece,\n  rank,\n  file\n}) => {\n  const moves = [];\n  if (file !== 4 || rank % 7 !== 0 || castleDirection === 'none') {\n    return moves;\n  }\n  if (piece.startsWith('w')) {\n    if (arbiter.isPlayerInCheck({\n      positionAfterMove: position,\n      player: 'w'\n    })) return moves;\n    if (['left', 'both'].includes(castleDirection) && !position[0][3] && !position[0][2] && !position[0][1] && position[0][0] === 'wr' && !arbiter.isPlayerInCheck({\n      positionAfterMove: arbiter.performMove({\n        position,\n        piece,\n        rank,\n        file,\n        x: 0,\n        y: 3\n      }),\n      player: 'w'\n    }) && !arbiter.isPlayerInCheck({\n      positionAfterMove: arbiter.performMove({\n        position,\n        piece,\n        rank,\n        file,\n        x: 0,\n        y: 2\n      }),\n      player: 'w'\n    })) {\n      moves.push([0, 2]);\n    }\n    if (['right', 'both'].includes(castleDirection) && !position[0][5] && !position[0][6] && position[0][7] === 'wr' && !arbiter.isPlayerInCheck({\n      positionAfterMove: arbiter.performMove({\n        position,\n        piece,\n        rank,\n        file,\n        x: 0,\n        y: 5\n      }),\n      player: 'w'\n    }) && !arbiter.isPlayerInCheck({\n      positionAfterMove: arbiter.performMove({\n        position,\n        piece,\n        rank,\n        file,\n        x: 0,\n        y: 6\n      }),\n      player: 'w'\n    })) {\n      moves.push([0, 6]);\n    }\n  } else {\n    if (arbiter.isPlayerInCheck({\n      positionAfterMove: position,\n      player: 'b'\n    })) return moves;\n    if (['left', 'both'].includes(castleDirection) && !position[7][3] && !position[7][2] && !position[7][1] && position[7][0] === 'br' && !arbiter.isPlayerInCheck({\n      positionAfterMove: arbiter.performMove({\n        position,\n        piece,\n        rank,\n        file,\n        x: 7,\n        y: 3\n      }),\n      position: position,\n      player: 'b'\n    }) && !arbiter.isPlayerInCheck({\n      positionAfterMove: arbiter.performMove({\n        position,\n        piece,\n        rank,\n        file,\n        x: 7,\n        y: 2\n      }),\n      position: position,\n      player: 'b'\n    })) {\n      moves.push([7, 2]);\n    }\n    if (['right', 'both'].includes(castleDirection) && !position[7][5] && !position[7][6] && position[7][7] === 'br' && !arbiter.isPlayerInCheck({\n      positionAfterMove: arbiter.performMove({\n        position,\n        piece,\n        rank,\n        file,\n        x: 7,\n        y: 5\n      }),\n      position: position,\n      player: 'b'\n    }) && !arbiter.isPlayerInCheck({\n      positionAfterMove: arbiter.performMove({\n        position,\n        piece,\n        rank,\n        file,\n        x: 7,\n        y: 6\n      }),\n      position: position,\n      player: 'b'\n    })) {\n      moves.push([7, 6]);\n    }\n  }\n  return moves;\n};\nexport const getCastlingDirections = ({\n  castleDirection,\n  piece,\n  file,\n  rank\n}) => {\n  file = Number(file);\n  rank = Number(rank);\n  const direction = castleDirection[piece[0]];\n  if (piece.endsWith('k')) return 'none';\n  if (file === 0 && rank === 0) {\n    if (direction === 'both') return 'right';\n    if (direction === 'left') return 'none';\n  }\n  if (file === 7 && rank === 0) {\n    if (direction === 'both') return 'left';\n    if (direction === 'right') return 'none';\n  }\n  if (file === 0 && rank === 7) {\n    if (direction === 'both') return 'right';\n    if (direction === 'left') return 'none';\n  }\n  if (file === 7 && rank === 7) {\n    if (direction === 'both') return 'left';\n    if (direction === 'right') return 'none';\n  }\n};\nexport const getPieces = (position, enemy) => {\n  const enemyPieces = [];\n  position.forEach((rank, x) => {\n    rank.forEach((file, y) => {\n      if (position[x][y].startsWith(enemy)) enemyPieces.push({\n        piece: position[x][y],\n        rank: x,\n        file: y\n      });\n    });\n  });\n  return enemyPieces;\n};\nexport const getKingPosition = (position, player) => {\n  let kingPos;\n  position.forEach((rank, x) => {\n    rank.forEach((file, y) => {\n      if (position[x][y].startsWith(player) && position[x][y].endsWith('k')) kingPos = [x, y];\n    });\n  });\n  return kingPos;\n};","map":{"version":3,"names":["arbiter","getRookMoves","position","piece","rank","file","moves","us","enemy","direction","forEach","dir","i","_position$x","x","y","undefined","startsWith","push","getKnightMoves","candidates","c","_position","cell","getBishopMoves","_position$x2","getQueenMoves","getKingMoves","_position$x3","getPawnMoves","_position4","_position2","_position3","getPawnCaptures","prevPosition","_position5","_position6","enemyPawn","adjacentFiles","f","_position$rank","_position7","_prevPosition$rank","_prevPosition","getCastlingMoves","castleDirection","isPlayerInCheck","positionAfterMove","player","includes","performMove","getCastlingDirections","Number","endsWith","getPieces","enemyPieces","getKingPosition","kingPos"],"sources":["C:/Users/Dr. Diabootical/OneDrive/Gaming/ReactChess-master/src/arbiter/getMoves.js"],"sourcesContent":["import arbiter from \"./arbiter\"\n\nexport const getRookMoves = ({position,piece,rank,file}) => {\n    const moves = []\n    const us = piece[0]\n    const enemy = us === 'w' ? 'b' : 'w'\n\n    const direction = [\n        [-1,0],\n        [1,0],\n        [0,-1],\n        [0,1],\n    ]\n\n    direction.forEach(dir => {\n        for (let i = 1; i <= 8; i++) {\n            const x = rank+(i*dir[0])\n            const y = file+(i*dir[1])\n            if(position?.[x]?.[y] === undefined)\n                break\n            if(position[x][y].startsWith(enemy)){\n                moves.push ([x,y])\n                break;\n            }\n            if(position[x][y].startsWith(us)){\n                break\n            }\n            moves.push ([x,y])\n        }\n    })\n\n    return moves\n}\n\nexport const getKnightMoves = ({position,rank,file}) => {\n    const moves = []\n    const enemy = position[rank][file].startsWith('w') ? 'b' : 'w'\n\n    const candidates = [\n        [-2,-1],\n        [-2,1],\n        [-1,-2],\n        [-1,2],\n        [1,-2],\n        [1,2],\n        [2,-1],\n        [2,1],\n    ]\n    candidates.forEach(c => {\n        const cell = position?.[rank+c[0]]?.[file+c[1]]\n        if(cell !== undefined && (cell.startsWith(enemy) || cell === '')){\n            moves.push ([rank+c[0],file+c[1]])\n        }\n    })\n    return moves\n}\n\nexport const getBishopMoves = ({position,piece,rank,file}) => {\n    const moves = []\n    const us = piece[0]\n    const enemy = us === 'w' ? 'b' : 'w'\n\n    const direction = [\n        [-1,-1],\n        [-1,1],\n        [1,-1],\n        [1,1],\n    ]\n\n    direction.forEach(dir => {\n        for (let i = 1; i <= 8; i++) {\n            const x = rank+(i*dir[0])\n            const y = file+(i*dir[1])\n            if(position?.[x]?.[y] === undefined)\n                break\n            if(position[x][y].startsWith(enemy)){\n                moves.push ([x,y])\n                break;\n            }\n            if(position[x][y].startsWith(us)){\n                break\n            }\n            moves.push ([x,y])\n        }\n    })\n    return moves\n}\n\nexport const getQueenMoves = ({position,piece,rank,file}) => {\n    const moves = [\n        ...getBishopMoves({position,piece,rank,file}),\n        ...getRookMoves({position,piece,rank,file})\n    ]\n    \n    return moves\n}\n\nexport const getKingMoves = ({position,piece,rank,file}) => {\n    let moves = []\n    const us = piece[0]\n    const direction = [\n        [1,-1], [1,0],  [1,1],\n        [0,-1],         [0,1],\n        [-1,-1],[-1,0], [-1,1],\n    ]\n\n    direction.forEach(dir => {\n        const x = rank+dir[0]\n        const y = file+dir[1]\n        if(position?.[x]?.[y] !== undefined && !position[x][y].startsWith(us))\n        moves.push ([x,y])\n    })\n    return moves\n}\n\nexport const getPawnMoves = ({position,piece,rank,file}) => {\n\n    const moves = []\n    const dir = piece==='wp' ? 1 : -1\n\n    // Move two tiles on first move\n    if (rank % 5 === 1){\n        if (position?.[rank+dir]?.[file] === '' && position?.[rank+dir+dir]?.[file] === ''){\n            moves.push ([rank+dir+dir,file])\n        }\n    }\n\n    // Move one tile\n    if (!position?.[rank+dir]?.[file]){\n        moves.push ([rank+dir,file])\n    }\n\n    return moves\n}\n\nexport const getPawnCaptures =  ({position,prevPosition,piece,rank,file}) => {\n\n    const moves = []\n    const dir = piece==='wp' ? 1 : -1\n    const enemy = piece[0] === 'w' ? 'b' : 'w'\n\n    // Capture enemy to left\n    if (position?.[rank+dir]?.[file-1] && position[rank+dir][file-1].startsWith(enemy) ){\n        moves.push ([rank+dir,file-1])\n    }\n\n    // Capture enemy to right\n    if (position?.[rank+dir]?.[file+1] && position[rank+dir][file+1].startsWith(enemy) ){\n        moves.push ([rank+dir,file+1])\n    }\n\n    // EnPassant\n    // Check if enemy moved twice in last round\n    const enemyPawn = dir === 1 ? 'bp' : 'wp'\n    const adjacentFiles = [file-1,file+1]\n    if(prevPosition){\n        if ((dir === 1 && rank === 4) || (dir === -1 && rank === 3)){\n            adjacentFiles.forEach(f => {\n                if (position?.[rank]?.[f] === enemyPawn && \n                    position?.[rank+dir+dir]?.[f] === '' &&\n                    prevPosition?.[rank]?.[f] === '' && \n                    prevPosition?.[rank+dir+dir]?.[f] === enemyPawn){\n                        moves.push ([rank+dir,f])\n                    }\n            })\n        }\n    }\n\n\n    return moves\n}\n\nexport const getCastlingMoves = ({position,castleDirection,piece,rank,file}) => {\n    const moves = []\n    \n    if (file !== 4 || rank % 7 !== 0 || castleDirection === 'none'){\n        return moves\n    }\n    if (piece.startsWith('w') ){\n\n        if (arbiter.isPlayerInCheck({\n            positionAfterMove : position,\n            player : 'w'\n        }))\n            return moves\n\n        if (['left','both'].includes(castleDirection) && \n            !position[0][3] && \n            !position[0][2] && \n            !position[0][1] &&\n            position[0][0] === 'wr' &&\n            !arbiter.isPlayerInCheck({\n                positionAfterMove : arbiter.performMove({position,piece,rank,file,x:0,y:3}),\n                player : 'w'\n            }) &&\n            !arbiter.isPlayerInCheck({\n                positionAfterMove : arbiter.performMove({position,piece,rank,file,x:0,y:2}),\n                player : 'w'\n            })){\n            moves.push ([0,2])\n        }\n        if (['right','both'].includes(castleDirection) && \n            !position[0][5] && \n            !position[0][6] &&\n            position[0][7] === 'wr' &&\n            !arbiter.isPlayerInCheck({\n                positionAfterMove : arbiter.performMove({position,piece,rank,file,x:0,y:5}),\n                player : 'w'\n            }) &&\n            !arbiter.isPlayerInCheck({\n                positionAfterMove : arbiter.performMove({position,piece,rank,file,x:0,y:6}),\n                player : 'w'\n            }))\n            {\n            moves.push ([0,6])\n        }\n    }\n    else {\n        if (arbiter.isPlayerInCheck({\n            positionAfterMove : position,\n            player : 'b'\n        }))\n            return moves\n\n        if (['left','both'].includes(castleDirection) && \n            !position[7][3] && \n            !position[7][2] && \n            !position[7][1] &&\n            position[7][0] === 'br' &&\n            !arbiter.isPlayerInCheck({\n                positionAfterMove : arbiter.performMove({position,piece,rank,file,x:7,y:3}),\n                position : position,\n                player : 'b'\n            }) &&\n            !arbiter.isPlayerInCheck({\n                positionAfterMove : arbiter.performMove({position,piece,rank,file,x:7,y:2}),\n                position : position,\n                player : 'b'\n            })){\n            moves.push ([7,2])\n        }\n        if (['right','both'].includes(castleDirection) && \n            !position[7][5] && \n            !position[7][6] &&\n            position[7][7] === 'br' &&\n            !arbiter.isPlayerInCheck({\n                positionAfterMove : arbiter.performMove({position,piece,rank,file,x:7,y:5}),\n                position : position,\n                player : 'b'\n            }) &&\n            !arbiter.isPlayerInCheck({\n                positionAfterMove : arbiter.performMove({position,piece,rank,file,x:7,y:6}),\n                position : position,\n                player : 'b'\n            })){\n            moves.push ([7,6])\n        }\n    }\n\n    return moves\n\n}\n\nexport const getCastlingDirections = ({castleDirection,piece,file,rank}) => {\n    file = Number(file)\n    rank = Number(rank)\n    const direction = castleDirection[piece[0]]\n    if (piece.endsWith('k'))\n        return 'none'\n\n    if (file === 0 && rank === 0 ){ \n        if (direction === 'both')\n            return 'right'\n        if (direction === 'left')\n            return 'none'\n    } \n    if (file === 7 && rank === 0 ){ \n        if (direction === 'both')\n            return 'left'\n        if (direction === 'right')\n            return 'none'\n    } \n    if (file === 0 && rank === 7 ){ \n        if (direction === 'both')\n            return 'right'\n        if (direction === 'left')\n            return 'none'\n    } \n    if (file === 7 && rank === 7 ){ \n        if (direction === 'both')\n            return 'left'\n        if (direction === 'right')\n            return 'none'\n    } \n}\n\nexport const getPieces = (position, enemy) => {\n    const enemyPieces = []\n    position.forEach((rank,x) => {\n        rank.forEach((file, y) => {\n            if(position[x][y].startsWith(enemy))\n                enemyPieces.push({\n                    piece : position[x][y],\n                    rank : x,\n                    file : y,\n                })\n        })\n    })\n    return enemyPieces\n}\n\nexport const getKingPosition = (position, player) => {\n    let kingPos \n    position.forEach((rank,x) => {\n        rank.forEach((file, y) => {\n            if(position[x][y].startsWith(player) && position[x][y].endsWith('k'))\n                kingPos=[x,y]\n        })\n    })\n    return kingPos\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}