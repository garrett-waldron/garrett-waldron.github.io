{"ast":null,"code":"import { Status } from \"../constants\";\nimport actionTypes from \"./actionTypes\";\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    case actionTypes.NEW_MOVE:\n      {\n        let {\n          position,\n          movesList,\n          turn\n        } = state;\n        position = [...position, action.payload.newPosition];\n        movesList = [...movesList, action.payload.newMove];\n        turn = turn === 'w' ? 'b' : 'w';\n        return {\n          ...state,\n          position,\n          movesList,\n          turn\n        };\n      }\n    case actionTypes.GENERATE_CANDIDATE_MOVES:\n      {\n        const {\n          candidateMoves\n        } = action.payload;\n        return {\n          ...state,\n          candidateMoves\n        };\n      }\n    case actionTypes.CLEAR_CANDIDATE_MOVES:\n      {\n        return {\n          ...state,\n          candidateMoves: []\n        };\n      }\n    case actionTypes.PROMOTION_OPEN:\n      {\n        return {\n          ...state,\n          status: Status.promoting,\n          promotionSquare: {\n            ...action.payload\n          }\n        };\n      }\n    case actionTypes.PROMOTION_CLOSE:\n      {\n        return {\n          ...state,\n          status: Status.ongoing,\n          promotionSquare: null\n        };\n      }\n    case actionTypes.CAN_CASTLE:\n      {\n        let {\n          turn,\n          castleDirection\n        } = state;\n        castleDirection[turn] = action.payload;\n        return {\n          ...state,\n          castleDirection\n        };\n      }\n    case actionTypes.STALEMATE:\n      {\n        return {\n          ...state,\n          status: Status.stalemate\n        };\n      }\n    case actionTypes.INSUFFICIENT_MATERIAL:\n      {\n        return {\n          ...state,\n          status: Status.insufficient\n        };\n      }\n    case actionTypes.WIN:\n      {\n        return {\n          ...state,\n          status: action.payload === 'w' ? Status.white : Status.black\n        };\n      }\n    case actionTypes.NEW_GAME:\n      {\n        return {\n          ...action.payload\n        };\n      }\n    case actionTypes.TAKE_BACK:\n      {\n        let {\n          position,\n          movesList,\n          turn\n        } = state;\n        if (position.length > 1) {\n          position = position.slice(0, position.length - 1);\n          movesList = movesList.slice(0, movesList.length - 1);\n          turn = turn === 'w' ? 'b' : 'w';\n        }\n        return {\n          ...state,\n          position,\n          movesList,\n          turn\n        };\n      }\n    default:\n      return state;\n  }\n};","map":{"version":3,"names":["Status","actionTypes","reducer","state","action","type","NEW_MOVE","position","movesList","turn","payload","newPosition","newMove","GENERATE_CANDIDATE_MOVES","candidateMoves","CLEAR_CANDIDATE_MOVES","PROMOTION_OPEN","status","promoting","promotionSquare","PROMOTION_CLOSE","ongoing","CAN_CASTLE","castleDirection","STALEMATE","stalemate","INSUFFICIENT_MATERIAL","insufficient","WIN","white","black","NEW_GAME","TAKE_BACK","length","slice"],"sources":["C:/Users/Dr. Diabootical/OneDrive/Gaming/ReactChess-master/src/reducer/reducer.js"],"sourcesContent":["import { Status } from \"../constants\";\nimport actionTypes from \"./actionTypes\";\nexport const reducer = (state, action) => {\n\n    switch (action.type) {\n        case actionTypes.NEW_MOVE : {\n            let {position,movesList,turn} = state \n            position = [\n                ...position,\n                action.payload.newPosition\n            ]\n            movesList = [\n                ...movesList,\n                action.payload.newMove\n            ]\n            turn = turn === 'w' ? 'b' : 'w'\n\n            return {\n                ...state,\n                position,\n                movesList,\n                turn,\n            }\n        }\n\n        case actionTypes.GENERATE_CANDIDATE_MOVES : {\n            const {candidateMoves} = action.payload\n            return {\n                ...state,\n                candidateMoves\n            }\n        } \n\n        case actionTypes.CLEAR_CANDIDATE_MOVES : {\n            return {\n                ...state,\n                candidateMoves : []\n            }\n        }\n    \n        case actionTypes.PROMOTION_OPEN : {\n            return {\n                ...state,\n                status : Status.promoting,\n                promotionSquare : {...action.payload},\n            }\n        }\n\n        case actionTypes.PROMOTION_CLOSE : {\n            return {\n                ...state,\n                status : Status.ongoing,\n                promotionSquare : null,\n            }\n        }\n\n        case actionTypes.CAN_CASTLE : {\n            let {turn,castleDirection} = state \n        \n            castleDirection[turn] = action.payload\n            \n            return {\n                ...state,\n                castleDirection,\n            }\n        }\n        \n        case actionTypes.STALEMATE : {\n            return {\n                ...state,\n                status : Status.stalemate\n            }\n        }\n\n        case actionTypes.INSUFFICIENT_MATERIAL : {\n            return {\n                ...state,\n                status : Status.insufficient\n            }\n        }\n\n        case actionTypes.WIN : {\n            return {\n                ...state,\n                status : action.payload === 'w' ? Status.white : Status.black\n            }\n        }\n         \n        case actionTypes.NEW_GAME : {\n            return {\n                ...action.payload,\n            }\n        }\n\n        case actionTypes.TAKE_BACK : {\n            let {position,movesList,turn} = state \n            if (position.length > 1){\n                position = position.slice(0,position.length-1)\n                movesList = movesList.slice(0,movesList.length-1)\n                turn = turn === 'w' ? 'b' : 'w'\n            }\n\n            return {\n                ...state,\n                position,\n                movesList,\n                turn,\n            }\n        }\n\n        default : \n            return state\n    }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}